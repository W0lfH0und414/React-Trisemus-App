{"version":3,"sources":["Encipher.js","Decipher.js","App.js","index.js","images/Trisemus-table-cut.png"],"names":["Encipher","props","state","alphabet","keyChars","previousFileInput","plainText","keyWord","keyReference","resultReference","keyGenDisabled","encodeBtnDisabled","saveFileBtnDisabled","saveKeyBtnDisabled","decodeBtnDisabled","saveDecodedBtnDisabled","handleFileInput","bind","handleKeyGen","handleEncode","toBinary","fromBinary","PLAIN_TEXT_FILE_INPUT","document","getElementById","KEYGEN_INPUT","nonKeyWordChars","file","files","keyLen","promiseThis","this","Promise","resolve","reject","reader","FileReader","setState","onload","result","console","log","i","length","indexOf","push","filter","ch","readAsText","then","Math","round","random","keyChar","value","readOnly","error","alert","e","target","id","disabled","TYPE","key","keyCols","keyRows","ceil","keyCharsIndexer","j","encipheredText","converted","btoa","keyObject","JSON","stringify","convertedKey","keyRef","string","codeUnits","Uint16Array","charCodeAt","String","fromCharCode","Uint8Array","buffer","binary","bytes","Fragment","className","type","onInput","onClick","download","href","React","Component","Decipher","loadedEncipheredText","previousEncTxtInput","previousKeyInput","decodeKey","decipheredText","decodeRef","handleDecode","keyEndingCheck","encipheredFile","keyFile","textPromise","keyReader","parse","binaryDecoded","App","huy","src","table","alt","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.4f8f7fad.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Encipher extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alphabet: [],\r\n            keyChars: [],\r\n            previousFileInput: null,\r\n            plainText: \"\",\r\n            keyWord: \"\",\r\n            keyReference: '#',\r\n            resultReference: '#',\r\n            keyGenDisabled: true,\r\n            encodeBtnDisabled: true,\r\n            saveFileBtnDisabled: true,\r\n            saveKeyBtnDisabled: true,\r\n            decodeBtnDisabled: true,\r\n            saveDecodedBtnDisabled: true\r\n        };\r\n        \r\n        this.handleFileInput = this.handleFileInput.bind(this);\r\n        this.handleKeyGen = this.handleKeyGen.bind(this);\r\n        this.handleEncode = this.handleEncode.bind(this);\r\n        this.toBinary = this.toBinary.bind(this);\r\n        this.fromBinary = this.fromBinary.bind(this);\r\n    }\r\n\r\n    handleKeyGen() {\r\n        const PLAIN_TEXT_FILE_INPUT = document.getElementById('load-dec');\r\n        const KEYGEN_INPUT = document.getElementById('keygen-input');\r\n        const nonKeyWordChars = [' ', ',', '.', '<', '>', '/', '|', '\\\\', '[', ']',\r\n '{', '}', '!', '@', '\"', '\\'', '#', '№', '$', ';', '%', '^', ':', '&', '?',\r\n '*', '(', ')', '~', '`', '+', '-', '_', '=', '↵', '\\n', '\\t', '\\r'];\r\n        let file = PLAIN_TEXT_FILE_INPUT.files[0];\r\n        let alphabet = [];\r\n        let keyChars = [];\r\n        let keyLen = 0;\r\n        let keyWord = \"\";\r\n        let promiseThis = this;\r\n        if (file) {\r\n            let promise = new Promise(function(resolve, reject) {\r\n                let reader = new FileReader();\r\n                if (file !== promiseThis.state.previousFileInput) {\r\n                    promiseThis.setState({\r\n                        plainText: \"\"\r\n                    });\r\n                    reader.onload = function() {\r\n                        if (reader.result) {\r\n                            promiseThis.setState({\r\n                                plainText: reader.result\r\n                            });\r\n                            console.log(reader.result);\r\n                            for (let i = 0; i < reader.result.length; i++) {\r\n                                if (alphabet.indexOf(reader.result[i]) === -1) {\r\n                                    alphabet.push(reader.result[i]);\r\n                                }\r\n                            }\r\n                            keyChars = alphabet.filter(ch => nonKeyWordChars.indexOf(ch) === -1)\r\n                            console.log(keyChars);\r\n                            promiseThis.setState({\r\n                                alphabet: alphabet,\r\n                                keyChars: keyChars\r\n                            });\r\n                            resolve(keyChars);\r\n                        }\r\n                    }\r\n                    reader.readAsText(file);\r\n                }\r\n                else {\r\n                    resolve(promiseThis.state.keyChars);\r\n                }\r\n            });\r\n            promise.then(result => {\r\n                if(result) {\r\n                    console.log(result);\r\n                    if (promiseThis.state.keyChars) {\r\n                        if (promiseThis.state.keyChars.length > 15) {\r\n                            keyLen = Math.round(Math.random()*3) + 5;\r\n                        } \r\n                        else {\r\n                            keyLen = Math.round(Math.random()*4);\r\n                        }\r\n                        console.log(keyLen);\r\n                        let keyChar = '';\r\n                        while (keyWord.length < keyLen) {\r\n                            keyChar = promiseThis.state.keyChars[Math.round(Math.random()*promiseThis.state.keyChars.length) - 1];\r\n                            if (keyChar && keyChar !== '↵' && keyWord.indexOf(keyChar) === -1){\r\n                                keyWord += keyChar;\r\n                            }\r\n                        }\r\n                        promiseThis.setState({\r\n                            keyWord: keyWord\r\n                        });\r\n                        console.log(keyWord);\r\n                        if (KEYGEN_INPUT.value) {\r\n                            promiseThis.setState({encodeBtnDisabled: false});\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    KEYGEN_INPUT.readOnly = false;\r\n                    KEYGEN_INPUT.value = \"\";\r\n                    KEYGEN_INPUT.readOnly = true;\r\n                }\r\n                promiseThis.setState({\r\n                    previousFileInput: file\r\n                });\r\n            }, error => alert(error));\r\n        }\r\n        else {return;}\r\n    }\r\n\r\n    handleFileInput (e) {\r\n        const KEYGEN_INPUT = document.getElementById('keygen-input');\r\n        if (e.target.id === 'load-dec') {\r\n            console.log(e.target.value);\r\n            e.target.value !== \"\" ? this.setState({disabled: false}) : this.setState({disabled: true});\r\n            if (!e.target.value) {\r\n            this.setState({encodeBtnDisabled: true,\r\n            saveFileBtnDisabled: true,\r\n            saveKeyBtnDisabled: true});\r\n            KEYGEN_INPUT.readOnly = false;\r\n            KEYGEN_INPUT.value = \"\";\r\n            KEYGEN_INPUT.readOnly = true;\r\n            }\r\n        }\r\n        else {\r\n            (document.getElementById('load-en').value !== \"\"\r\n             && document.getElementById('load-en-key').value !== \"\") ?\r\n              this.setState({decodeBtnDisabled: false}) : this.setState({decodeBtnDisabled: true});\r\n            if (!e.target.value) {\r\n                this.setState({\r\n                    decodeBtnDisabled: true,\r\n                    saveDecodedBtnDisabled: true\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleEncode () {\r\n        const TYPE = 'data:application/octet-stream;base64, ';\r\n        let key = [];\r\n        let keyCols = this.state.keyWord.length;\r\n        let keyRows = Math.ceil(this.state.keyChars.length/keyCols);\r\n        let keyCharsIndexer = 0;\r\n        for (let i = 0; i < keyRows; i++) {\r\n            key[i] = [];\r\n            for (let j = 0; j < keyCols; j++) {\r\n                if (i === 0) {\r\n                    key[i][j] = this.state.keyWord[j];\r\n                }\r\n                else {\r\n                    while (this.state.keyWord.indexOf(this.state.keyChars[keyCharsIndexer]) !== -1) {\r\n                        keyCharsIndexer++;\r\n                    }\r\n                    if (keyCharsIndexer < this.state.keyChars.length) {\r\n                        key[i][j] = this.state.keyChars[keyCharsIndexer];\r\n                    }\r\n                    else {\r\n                        key[i][j] = null;\r\n                    }\r\n                    keyCharsIndexer++;\r\n                }\r\n            }\r\n        }\r\n        console.log(key);\r\n        if (key) {\r\n            let encipheredText = \"\";\r\n            for (let i = 0; i < this.state.plainText.length; i++) {\r\n                if (this.state.keyChars.indexOf(this.state.plainText[i]) === -1) {\r\n                    encipheredText += this.state.plainText[i];\r\n                }\r\n                else {\r\n                    for (let j = 0; j < key.length; j++) {\r\n                        if (key[j].indexOf(this.state.plainText[i]) !== -1 &&\r\n                        j !== key.length - 1 &&\r\n                        key[j + 1][key[j].indexOf(this.state.plainText[i])] !== null) {\r\n                            encipheredText += key[j + 1][key[j].indexOf(this.state.plainText[i])];\r\n                        }\r\n                        else if (key[j].indexOf(this.state.plainText[i]) !== -1 && j === key.length - 1) {\r\n                            encipheredText += key[0][key[j].indexOf(this.state.plainText[i])];\r\n                        }\r\n                        else if (j !== key.length - 1 && key[j + 1][key[j].indexOf(this.state.plainText[i])] === null) {\r\n                            encipheredText += key[0][key[j].indexOf(this.state.plainText[i])];\r\n                        }\r\n                    }\r\n                }  \r\n            }\r\n            console.log(encipheredText);\r\n            console.log(this.toBinary(encipheredText));\r\n            console.log(this.fromBinary(encipheredText));\r\n            let converted = this.toBinary(encipheredText);\r\n            let result = TYPE + btoa(converted);\r\n            this.setState({\r\n                resultReference: result\r\n            });\r\n            let keyObject = JSON.stringify({\r\n                key: key\r\n            });\r\n            let convertedKey = this.toBinary(keyObject);\r\n            let keyRef = TYPE + btoa(convertedKey);\r\n            this.setState({\r\n                keyReference: keyRef,\r\n                saveFileBtnDisabled: false,\r\n                saveKeyBtnDisabled: false\r\n            });\r\n        }\r\n    }\r\n\r\n    toBinary(string) {\r\n        const codeUnits = new Uint16Array(string.length);\r\n        for (let i = 0; i < codeUnits.length; i++) {\r\n            codeUnits[i] = string.charCodeAt(i);\r\n        }\r\n        return String.fromCharCode(...new Uint8Array(codeUnits.buffer));\r\n    }\r\n\r\n    fromBinary(binary) {\r\n        const bytes = new Uint8Array(binary.length);\r\n        for (let i = 0; i < bytes.length; i++) {\r\n            bytes[i] = binary.charCodeAt(i);\r\n        }\r\n        return String.fromCharCode(...new Uint16Array(bytes.buffer));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"plain-uploading\">\r\n                    <p>Загрузите файл, который Вы хотите зашифровать:</p>\r\n                    <input id=\"load-dec\" type=\"file\" onInput={this.handleFileInput} />\r\n                </div>\r\n                <div className=\"key-gen\">\r\n                    <p>Сгенерируйте ключ шифрования:</p>\r\n                    <input type=\"text\" id=\"keygen-input\" readOnly value={this.state.keyWord}/>\r\n                    <input type=\"button\" id=\"keygen-button\" value=\"Сгенерировать\" onClick={this.handleKeyGen}  disabled={this.state.disabled}/>\r\n                </div>\r\n                <div className=\"encipher\">\r\n                    <p>Чтобы зашифровать файл по сгенерированному ключу, нажмите на кнопку:</p>\r\n                    <input type=\"button\" id=\"encode-button\" value=\"Зашифровать\" onClick={this.handleEncode} disabled={this.state.encodeBtnDisabled} />\r\n                </div>\r\n                <div className=\"process-indicator\" id=\"encode-progress\"></div>\r\n                <div className=\"enciphered-downloading\">\r\n                    <a id=\"enciphered-txt-link\" download=\"enciphered.txt\" href={this.state.resultReference}>\r\n                        <input type=\"button\" id=\"download-encoded\" value=\"Скачать зашифрованный файл\" disabled={this.state.saveFileBtnDisabled} />\r\n                    </a>\r\n                    <a id=\"key-txt-link\" download=\"key.json\" href={this.state.keyReference}>\r\n                        <input type=\"button\" id=\"download-key\" value=\"Сохранить ключ\" disabled={this.state.saveKeyBtnDisabled} />\r\n                    </a>\r\n                </div> \r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Decipher extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loadedEncipheredText: \"\",\r\n            previousEncTxtInput: null,\r\n            previousKeyInput: null,\r\n            decodeKey: {},\r\n            decipheredText: \"\",\r\n            decodeRef: '#',\r\n            keyGenDisabled: true,\r\n            encodeBtnDisabled: true,\r\n            saveFileBtnDisabled: true,\r\n            saveKeyBtnDisabled: true,\r\n            decodeBtnDisabled: true,\r\n            saveDecodedBtnDisabled: true\r\n        };\r\n        this.handleDecode = this.handleDecode.bind(this);\r\n        this.handleFileInput = this.handleFileInput.bind(this);\r\n        this.toBinary = this.toBinary.bind(this);\r\n        this.fromBinary = this.fromBinary.bind(this);\r\n        this.keyEndingCheck = this.keyEndingCheck.bind(this);\r\n    }\r\n\r\n    handleDecode() {\r\n        const TYPE = 'data:application/octet-stream;base64, ';\r\n        let encipheredFile = document.getElementById('load-en').files[0];\r\n        let keyFile = document.getElementById('load-en-key').files[0];\r\n        const nonKeyWordChars = [' ', ',', '.', '<', '>', '/', '|', '\\\\', '[', ']',\r\n '{', '}', '!', '@', '\"', '\\'', '#', '№', '$', ';', '%', '^', ':', '&', '?',\r\n '*', '(', ')', '~', '`', '+', '-', '_', '=', '↵', '\\n', '\\t', '\\r'];\r\n        let decipheredText = \"\";\r\n        console.log(encipheredFile);\r\n        let textPromise = new Promise((resolve, reject) => {\r\n            let reader = new FileReader();\r\n            if (encipheredFile !== this.state.previousEncTxtInput) {\r\n                reader.onload = () => {\r\n                    if (reader.result) {\r\n                        this.setState({\r\n                            loadedEncipheredText: this.fromBinary(reader.result)\r\n                        });\r\n                        console.log(reader.result);\r\n                        resolve(reader.result);\r\n                    }\r\n                };\r\n                reader.readAsText(encipheredFile);\r\n            }\r\n            else {\r\n                resolve(this.state.loadedEncipheredText);\r\n            }\r\n        });\r\n        let promiseThis = this;\r\n        textPromise.then(result => {\r\n            if (result) {\r\n                console.log(result);\r\n                let keyPromise = new Promise((resolve, reject) => {\r\n                    let keyReader = new FileReader();\r\n                    if (keyFile !== promiseThis.state.previousKeyInput) {\r\n                        promiseThis.setState({\r\n                            decodeKey: {}\r\n                        });\r\n                        keyReader.onload = () => {\r\n                            if(keyReader.result) {\r\n                                console.log(keyReader.result);\r\n                                resolve(promiseThis.fromBinary(keyReader.result));\r\n                            }\r\n                        };\r\n                        keyReader.readAsText(keyFile)\r\n                    }\r\n                });\r\n                keyPromise.then(result => {\r\n                    if (result) {\r\n                        promiseThis.setState({\r\n                            decodeKey: JSON.parse(result)\r\n                        })\r\n                        console.log(promiseThis.state.decodeKey);\r\n                    }\r\n                    promiseThis.setState({\r\n                        previousKeyInput: keyFile,\r\n                        decipheredText: \"\"\r\n                    });\r\n                    console.log(promiseThis.state.loadedEncipheredText);\r\n                    for (let j = 0; j < promiseThis.state.loadedEncipheredText.length; j++) {\r\n                        if (nonKeyWordChars.indexOf(promiseThis.state.loadedEncipheredText[j]) !== -1) {\r\n                            decipheredText += promiseThis.state.loadedEncipheredText[j];\r\n                        }\r\n                        else {\r\n                            for (let i = 0; i < promiseThis.state.decodeKey.key.length; i++) {\r\n                                if (promiseThis.state.decodeKey.key[i].indexOf(promiseThis.state.loadedEncipheredText[j]) !== -1\r\n                                && i !== 0) {\r\n                                    decipheredText = decipheredText + \r\n                                    promiseThis.state.decodeKey.key[i - 1][promiseThis.state.decodeKey.key[i]\r\n                                    .indexOf(promiseThis.state.loadedEncipheredText[j])];\r\n                                }\r\n                                else if (promiseThis.state.decodeKey.key[i].indexOf(promiseThis.state.loadedEncipheredText[j]) !== -1\r\n                                && i === 0\r\n                                && promiseThis.keyEndingCheck(promiseThis.state.decodeKey.key) === -1) {\r\n                                    decipheredText = decipheredText + \r\n                                    promiseThis.state.decodeKey.key[promiseThis.state.decodeKey.key.length - 1][promiseThis.state.decodeKey.key[i]\r\n                                    .indexOf(promiseThis.state.loadedEncipheredText[j])];\r\n                                }\r\n                                else if (promiseThis.state.decodeKey.key[i].indexOf(promiseThis.state.loadedEncipheredText[j]) !== -1\r\n                                && i === 0 && promiseThis.keyEndingCheck(promiseThis.state.decodeKey.key) !== -1\r\n                                && promiseThis.state.decodeKey.key.length > 2) {\r\n                                    decipheredText = decipheredText + \r\n                                    promiseThis.state.decodeKey.key[promiseThis.state.decodeKey.key.length - 2][promiseThis.state.decodeKey.key[i]\r\n                                    .indexOf(promiseThis.state.loadedEncipheredText[j])];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    promiseThis.setState({\r\n                        decipheredText: decipheredText\r\n                    });\r\n                    if (promiseThis.state.decipheredText) {\r\n                        let binaryDecoded = promiseThis.toBinary(promiseThis.state.decipheredText)\r\n                        promiseThis.setState({\r\n                            decodeRef: TYPE + btoa(binaryDecoded),\r\n                            saveDecodedBtnDisabled: false\r\n                        });\r\n                        console.log(promiseThis.state.decipheredText);\r\n                    }\r\n                }, error => alert(error));\r\n            }\r\n            promiseThis.setState({\r\n                previousEncTxtInput: encipheredFile\r\n            })\r\n        }, error => alert(error));\r\n    }\r\n\r\n    handleFileInput (e) {\r\n        const KEYGEN_INPUT = document.getElementById('keygen-input');\r\n        if (e.target.id === 'load-dec') {\r\n            console.log(e.target.value);\r\n            e.target.value !== \"\" ? this.setState({keyGenDisabled: false}) : this.setState({keyGenDisabled: true});\r\n            if (!e.target.value) {\r\n                this.setState({\r\n                    encodeBtnDisabled: true,\r\n                    saveFileBtnDisabled: true,\r\n                    saveKeyBtnDisabled: true,\r\n                });\r\n                KEYGEN_INPUT.readOnly = false;\r\n                KEYGEN_INPUT.value = \"\";\r\n                KEYGEN_INPUT.readOnly = true;\r\n            }\r\n        }\r\n        else {\r\n            (document.getElementById('load-en').value !== \"\"\r\n             && document.getElementById('load-en-key').value !== \"\") ?\r\n              this.setState({decodeBtnDisabled: false}) : this.setState({decodeBtnDisabled: true});\r\n            if (!e.target.value) {\r\n                this.setState({\r\n                    decodeBtnDisabled: true,\r\n                    saveDecodedBtnDisabled: true\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    toBinary(string) {\r\n        const codeUnits = new Uint16Array(string.length);\r\n        for (let i = 0; i < codeUnits.length; i++) {\r\n            codeUnits[i] = string.charCodeAt(i);\r\n        }\r\n        return String.fromCharCode(...new Uint8Array(codeUnits.buffer));\r\n    }\r\n\r\n    fromBinary(binary) {\r\n        const bytes = new Uint8Array(binary.length);\r\n        for (let i = 0; i < bytes.length; i++) {\r\n            bytes[i] = binary.charCodeAt(i);\r\n        }\r\n        return String.fromCharCode(...new Uint16Array(bytes.buffer));\r\n    }\r\n\r\n    keyEndingCheck(key) {\r\n        return key[key.length - 1].indexOf(null);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"enciphered-uploading\">\r\n                    <p>Загрузите файл, который Вы хотите расшифровать:</p>\r\n                    <input id=\"load-en\" type=\"file\" onInput={this.handleFileInput} />\r\n                </div>\r\n                <div className=\"deciphering-key-uploading\">\r\n                    <p>Загрузите файл ключа дешифрования:</p>\r\n                    <input id=\"load-en-key\" type=\"file\" onInput={this.handleFileInput} />\r\n                </div>\r\n                <div className=\"decipher\">\r\n                    <p>Чтобы расшифровать файл по загруженному ключу, нажмите на кнопку:</p>\r\n                    <input type=\"button\" id=\"decode-button\" value=\"Расшифровать\" onClick={this.handleDecode} disabled={this.state.decodeBtnDisabled} />\r\n                </div>\r\n                <div className=\"process-indicator\" id=\"decode-progress\">decoding...</div>\r\n                <div className=\"plain-downloading\">\r\n                    <a id=\"deciphered-txt-link\" download=\"deciphered.txt\" href={this.state.decodeRef} >\r\n                        <input type=\"button\" id=\"download-decoded\" value=\"Скачать расшифрованный файл\" disabled={this.state.saveDecodedBtnDisabled} />\r\n                    </a>\r\n                </div> \r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Encipher from './Encipher';\r\nimport Decipher from './Decipher';\r\nimport table from './images/Trisemus-table-cut.png'\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            huy: true\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <React.Fragment>\r\n                <aside className=\"left-aside\"></aside>\r\n                <div className=\"main-content\">\r\n                    <nav>\r\n                        <span>ASIS LABS INC.</span>\r\n                        <span className=\"span-registered\">®</span>\r\n                        <ul>\r\n                            <a href=\"#encipher\" className=\"encipher-link\"><li>Зашифровать</li></a>\r\n                            <a href=\"#decipher\" className=\"decipher-link\"><li>Расшифровать</li></a>\r\n                        </ul>\r\n                    </nav>\r\n                    <div className=\"intro\">\r\n                        <h2>Шифрующие таблицы Трисемуса</h2>\r\n                        <p>\r\n                            В 1508 г. аббат из Германии Иоганн Трисемус написал печатную работу по криптологии под названием «Полиграфия».\r\n                            В этой книге он впервые систематически описал применение шифрующих таблиц, заполненных алфавитом в случайном \r\n                            порядке. Для получения такого шифра замены обычно использовались таблица для записи букв алфавита и ключевое \r\n                            слово (или фраза). В таблицу сначала вписывалось по строкам ключевое слово, причем повторяющиеся буквы\r\n                            отбрасывались. Затем эта таблица дополнялась не вошедшими в нее буквами алфавита по порядку.\r\n                            На рис. 1 изображена таблица с ключевым словом «ДЯДИНА».\r\n                        </p>\r\n                        <img src={table} alt=\"Trisemus table\"></img>\r\n                        <p className=\"image-description\">Рис.1. Шифрующая таблица Трисемуса</p>\r\n                        <p>\r\n                            Каждая буква открытого сообщения заменяется буквой, расположенной под ней в том же столбце. Если буква\r\n                            находится в последней строке таблицы, то для ее шифрования берут самую верхнюю букву столбца. Например,\r\n                            исходное сообщение «АБРАМОВ», зашифрованное – «ЖЗЦЖУФЙ».\r\n                        </p>\r\n                    </div>\r\n                    <h3 id=\"encipher\">Шифрование текстовых файлов методом таблиц Трисемуса</h3>\r\n                    <Encipher />\r\n                    <h3 id=\"decipher\">Дешифрование текстовых файлов методом таблиц Трисемуса</h3>\r\n                    <Decipher />\r\n                </div>\r\n                <aside className=\"right-aside\"></aside>\r\n            </React.Fragment>\r\n        );\r\n    }  \r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n","module.exports = __webpack_public_path__ + \"static/media/Trisemus-table-cut.b8412611.png\";"],"sourceRoot":""}